
  // Input: [1, 28, 28]

  // Conv2DLayer(
  //     int in_channels,                   // Número de canales de entrada (C_in). Por ejemplo: 3 para RGB.
  //     int out_channels,                  // Número de filtros o canales de salida (C_out).
  //     int kernel_size,                   // Tamaño del filtro cuadrado (k x k). Por ejemplo: 3 significa un filtro de 3x3.
  //     int in_height,                     // Alto de la imagen o entrada (H_in).
  //     int in_width,                      // Ancho de la imagen o entrada (W_in).
  //     int stride = 1,                    // Paso con el que se desliza el filtro sobre la entrada (por defecto es 1).
  //     int padding = 0,                   // Número de píxeles agregados como padding alrededor de la entrada (por defecto es 0).
  //     ActivationFunction *act = nullptr, // Puntero a la función de activación que se aplicará a la salida de la convolución (e.g., ReLU).
  //     Optimizer *opt = nullptr           // Puntero al optimizador que actualizará los pesos durante el entrenamiento (e.g., Adam).
  //     )

  //  PoolingLayer(
  //     2,   // channels: 2 mapas de activación de la capa anterior
  //     26,  // in_height: altura de cada canal de entrada
  //     26,  // in_width: ancho de cada canal de entrada
  //     2,   // kernel_size: ventana de pooling de 2x2
  //     2    // stride: se mueve 2 píxeles a la vez (reducción 50%)
  // )); // Salida: 2 canales de 13x13
